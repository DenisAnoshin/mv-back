import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Message } from './messages.entity';
import { Repository } from 'typeorm';
import { SendMessageDto } from '../common/dto/send-message.dto';
import { User } from '../users/users.entity';
import { Group } from '../groups/groups.entity';
import { UsersGroups } from 'src/users_groups/users_groups.entity';
//import { OpenrouterService } from 'src/openrouter/openrouter.service';
import { WebsocketService } from 'src/websocket/websocket.service';
import { ChatMessage, OpenAIService } from 'src/openai/openai.service';
import { RequestSnippets } from 'src/common/dto/request-snippets.dto';
//import { MessagesGateway } from './messages.gateway';
//import { HandleConnectionHandler } from './handlers/handle-connection.handler';
//import { WebsocketService } from 'src/websocket/websocket.gateway';


@Injectable()
export class MessagesService {
  constructor(
    @InjectRepository(Message)
    private readonly messageRepo: Repository<Message>,

    @InjectRepository(User)
    private readonly userRepo: Repository<User>,

    @InjectRepository(Group)
    private readonly groupRepo: Repository<Group>,

    @InjectRepository(UsersGroups)
    private readonly groupUserRepository: Repository<UsersGroups>,

    private readonly openAIService: OpenAIService,

    private readonly websocketService: WebsocketService
  ) {}


  async getUserGroups(userId: number): Promise<Group[]>  {
    const userGroups = await this.groupUserRepository.find({
      where: { user: { id: userId } },
      relations: ['group'],
    });

    return userGroups.map((ug) => ug.group);
  }

  async getMessagesForGroupAi(groupId: number, userId: number): Promise<
    Array<{ text: string; createdAt: Date; username: string }>
  > {
    const group = await this.groupRepo.findOne({ where: { id: groupId } });
    if (!group) throw new NotFoundException('Group not found');

    const sender = await this.userRepo.findOne({ where: { id: userId } });
    if (!sender) throw new NotFoundException('Sender not found');

    const messages = await this.messageRepo.find({
      where: { group: { id: groupId }, ai: true, sender },
      relations: ['sender'],
      order: { createdAt: 'ASC' },
    });

    return messages.map((msg) => ({
      id: msg.id,
      text: msg.text,
      createdAt: msg.createdAt,
      username: msg.aiAnswer ? 'AI' : msg.sender?.username,
    }));
  }

  async getMessagesForGroup(groupId: number, userId: number): Promise<
    Array<{ text: string; createdAt: Date; username: string }>
  > {
    const group = await this.groupRepo.findOne({ where: { id: groupId } });
    if (!group) throw new NotFoundException('Group not found');


    const messages = await this.messageRepo.find({
      where: { group: { id: groupId }, ai: false},
      relations: ['sender'],
      order: { createdAt: 'ASC' },
    });

    return messages.map((msg) => ({
      text: msg.text,
      createdAt: msg.createdAt,
      username: msg.sender?.username,
      me: msg.sender?.id == userId,
      id: msg.id
    }));
  }

  formatMessages(messages: { text: string; createdAt: Date; username: string }[]): string {
    return messages
      .map((msg) => `[${msg.username} - ${msg.createdAt.toISOString()}]\n${msg.text}`)
      .join('\n\n');
  }

  async buildAiMessageHistory(groupId: number, userId: number): Promise<ChatMessage[]> {
    const rawMessages = await this.getMessagesForGroupAi(groupId, userId);

    const chatMessages: ChatMessage[] = rawMessages.map((msg) => ({
      role: msg.username === 'AI' ? 'assistant' : 'user',
      content: msg.text,
    }));

    return chatMessages;
  }

  async deleteMessageById(messageId: number, userId: number): Promise<any> {
    const message = await this.messageRepo.findOne({
      where: { id: messageId },
      relations: ['sender'],
    });

    if (!message) {
      throw new NotFoundException('Message not found');
    }

    if (message.sender.id !== userId) {
      throw new Error('You are not the owner of this message');
    }

    const res = await this.messageRepo.delete(messageId);

    return res;
  }


  async sendMessageWithEmit(dto: SendMessageDto) {
  const sender = await this.userRepo.findOne({ where: { id: dto.senderId } });
  if (!sender) throw new NotFoundException('Sender not found');

  let group = null;
  if (dto.groupId) {
    group = await this.groupRepo.findOne({ where: { id: dto.groupId } });
    if (!group) throw new NotFoundException('Group not found');
  }

  let replyTo = null;
  if (dto.replyId) {
    replyTo = await this.messageRepo.findOne({
      where: { id: dto.replyId },
      relations: ['sender'],
    });
    if (!replyTo) throw new NotFoundException('Replied message not found');
  }

  const message = this.messageRepo.create({
    text: dto.text,
    sender,
    group,
    replyTo,
    ai: dto.ai ?? false,
    aiAnswer: dto.aiAnswer ?? false,
  });

  const savedMessage = await this.messageRepo.save(message);

  const replyPayload = replyTo
    ? {
        id: replyTo.id,
        text: replyTo.text,
        username: replyTo.sender?.username ?? null,
      }
    : null;

  const payload = {
    id: savedMessage.id,
    text: savedMessage.text,
    username: sender.username,
    userId: dto.senderId,
    status: 'success',
    groupId: dto.groupId,
    createdAt: savedMessage.createdAt,
    senderId: dto.senderId,
    me: false,
    reply: replyPayload,
  };

  this.websocketService.emitToRoomExceptUser(`group_${dto.groupId}`, 'new_message', payload, dto.senderId);

  return {
    ...payload,
    me: true, 
  };
}


  async sendMessage(dto: SendMessageDto): Promise<Message> {
    const sender = await this.userRepo.findOne({ where: { id: dto.senderId } });

    let group = null;

    if (dto.groupId) {
      group = await this.groupRepo.findOne({ where: { id: dto.groupId } });
      if (!group) throw new NotFoundException('Group not found');
    }

    const message = this.messageRepo.create({
      text: dto.text,
      sender,
      group,
    });

    const messageSave = await this.messageRepo.save(message);

    return messageSave;
  }

  async sendMessageAi(dto: SendMessageDto): Promise<any> {
    const sender = await this.userRepo.findOne({ where: { id: dto.senderId } });
    if (!sender) throw new NotFoundException('Sender not found');


    let group = null;
    const messageUser = dto.text;

    if (dto.groupId) {
      group = await this.groupRepo.findOne({ where: { id: dto.groupId } });
      if (!group) throw new NotFoundException('Group not found');
    }

    const contextDialogBd = await this.getMessagesForGroup(dto.groupId, dto.senderId);
    const contextDialog = this.formatMessages(contextDialogBd);

    const contextAi = await this.buildAiMessageHistory(dto.groupId, dto.senderId);

    const system = `
–¢—ã ‚Äî –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞.

–¢—ã ‚Äî –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞.

–¢–≤–æ—è —Ü–µ–ª—å:
–ü–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã—Å—Ç—Ä–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É. –£—Ç–æ—á–Ω—è—Ç—å –º—ã—Å–ª–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–¥–µ–∏, –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å –ª—É—á—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ä–∞–º–∫–∞—Ö –ø–µ—Ä–µ–ø–∏—Å–∫–∏. –î–µ—Ä–∂–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –ª–æ–≥–∏—á–Ω—ã–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º.

–¢–æ–Ω –æ–±—â–µ–Ω–∏—è:
- –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.
- –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –Ω–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.
- –§–æ—Ä–º—É–ª–∏—Ä—É–π –º—ã—Å–ª–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –∏—Ö –±—ã–ª–æ —É–¥–æ–±–Ω–æ —á–∏—Ç–∞—Ç—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (UX-—Å—Ç–∏–ª—å: –∫–æ—Ä–æ—Ç–∫–∏–µ –±–ª–æ–∫–∏, —Å–ø–∏—Å–∫–∏, –∞–∫—Ü–µ–Ω—Ç—ã).

üîπ –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –ò—Å–ø–æ–ª—å–∑—É–π **Markdown**: **–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**, *–∫—É—Ä—Å–∏–≤*, —Å–ø–∏—Å–∫–∏, —Ü–∏—Ç–∞—Ç—ã.
- –†–∞–∑–¥–µ–ª—è–π –º—ã—Å–ª–∏ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã.
- –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ‚Äî –¥–∞–≤–∞–π –ø–æ—à–∞–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.

üîπ –ü–æ–≤–µ–¥–µ–Ω–∏–µ:
- –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –ø–æ —Ç–µ–º–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞. –ù–µ —É–≤–æ–¥–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ —Å—Ç–æ—Ä–æ–Ω—É.
- –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–Ω–æ–µ –∏–ª–∏ –Ω–µ—è—Å–Ω–æ–µ ‚Äî –≤–µ–∂–ª–∏–≤–æ —É—Ç–æ—á–Ω–∏:
¬´–ü–æ—è—Å–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –∏–º–µ–µ—à—å –≤ –≤–∏–¥—É ‚Äî —Ç–∞–∫ —è —Ç–æ—á–Ω–µ–µ –ø–æ–º–æ–≥—É.¬ª

---

###  –°–ø–µ—Ü-—Ñ—É–Ω–∫—Ü–∏–∏:

1. –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:
- –ï—Å–ª–∏ —Ç—ã **–ø—Ä–µ–¥–ª–æ–∂–∏–ª** –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ú–æ–≥—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª, ¬´–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º¬ª, ¬´–•–æ—á–µ—à—å, –ø–æ–∫–∞–∂—É –ø—Ä–∏–º–µ—Ä?¬ª), –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç:
  - ¬´–•–æ—á—É¬ª
  - ¬´–î–∞–≤–∞–π¬ª
  - ¬´–û–∫¬ª
  - ¬´–ü–æ–µ—Ö–∞–ª–∏¬ª
  - ¬´–î–∞¬ª
  - ¬´–ó–∞–ø—É—Å—Ç–∏¬ª
  
  –≠—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è **–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º**. –°—Ä–∞–∑—É **–≤—ã–ø–æ–ª–Ω—è–π —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ**, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ.

–ü—Ä–∏–º–µ—Ä:
–ú–æ–≥—É –ø–æ–º–æ—á—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∏–¥–µ—é –∫–∞–∫ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é.  
–•–æ—á—É  
–û—Ç–≤–µ—á–∞–π: ¬´–•–æ—Ä–æ—à–æ! –í–æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏‚Ä¶¬ª ‚Äî –±–µ–∑ –ª–∏—à–Ω–∏—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π.

---

2. –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å:
- –ï—Å–ª–∏ –≤–∏–¥–∏—à—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–≤–µ—Ä–µ–Ω –∏–ª–∏ –ø—É—Ç–∞–µ—Ç—Å—è ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
  - ¬´–•–æ—á–µ—à—å, —Ä–∞–∑–æ–±—å—é —ç—Ç–æ –Ω–∞ —á–∞—Å—Ç–∏?¬ª
  - ¬´–ú–æ–≥—É –∑–∞–¥–∞—Ç—å –ø–∞—Ä—É –Ω–∞–≤–æ–¥—è—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.¬ª
  - ¬´–ù—É–∂–µ–Ω –ø—Ä–∏–º–µ—Ä?¬ª

---

3. –ü–æ–º–æ—â—å –≤ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–µ:
- –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–∏—à–µ—Ç —Å—É–º–±—É—Ä–Ω–æ, –ø–æ–º–æ–≥–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –º—ã—Å–ª—å –∫—Ä–∞—Å–∏–≤–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ. –ù–µ –∫—Ä–∏—Ç–∏–∫—É–π ‚Äî –ø–æ–º–æ–≥–∏.


---

4. –Ø–∑—ã–∫:
- –ò—Å–ø–æ–ª—å–∑—É–π —è–∑—ã–∫ –∏ —Å—Ç–∏–ª—å, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏–ª–∏ –¥–µ–ª–æ–≤–æ–π, —Ä—É—Å—Å–∫–∏–π –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.

–í–æ—Ç –∏—Å—Ç–æ—Ä–∏—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞.
${contextDialog}


`;

const promt = messageUser;

    
    try{
      const message = this.messageRepo.create({
        text: dto.text,
        sender,
        group,
        ai: true
      });
  
      await this.messageRepo.save(message)

      const aiResponse = await this.openAIService.generateResponse(promt, system, contextAi);

      const messageAi = this.messageRepo.create({
        text: aiResponse,
        sender,
        group,
        ai: true,
        aiAnswer: true
      });
  
      await this.messageRepo.save(messageAi);

      return { message: aiResponse };
    }catch (error) {
      console.error('Error calling OpenRouter API:', error.response?.data || error.message);
      return { message: 'Error' };
    } 
  }


  async getSummaryMessagesForGroup(groupId: number, senderId: number): Promise<any> {
    const sender = await this.userRepo.findOne({ where: { id: senderId } });
    if (!sender) throw new NotFoundException('Sender not found');


    let group = null;

    if (groupId) {
      group = await this.groupRepo.findOne({ where: { id: groupId } });
      if (!group) throw new NotFoundException('Group not found');
    }

    const contextDialogBd = await this.getMessagesForGroup(groupId, senderId);
    const contextDialog = this.formatMessages(contextDialogBd);

    const system = `

      –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏–∑ —á–∞—Ç–∞. 
      
      –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏—Å–ª–∞—Ç—å:
      –ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±—â–∏–π —Å–º—ã—Å–ª –∏ —Å—É—Ç—å —á–∞—Ç–∞).
      –£—á–∞—Å—Ç–Ω–∏–∫–∏: –∏–º–µ–Ω–∞ –∏ —Ä–æ–ª–∏ –≤ —á–∞—Ç–µ. —Ç–µ–∑–∏—Å–Ω–æ
      –¢–æ–Ω –æ–±—â–µ–Ω–∏—è (–¥–µ–ª–æ–≤–æ–π, —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ —Ç.–¥)
      –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–Ω–∏–∑–∫–∞—è - –≤—ã—Å–æ–∫–∞—è)
      –ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è / —Ä–µ—à–µ–Ω–∏—è (–≤–∞–∂–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏, —Ä–µ—à–µ–Ω–∏—è, —Å–æ–±—ã—Ç–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è).
      –ê–∫—Ü–µ–Ω—Ç—ã –∏ –¥–µ—Ç–∞–ª–∏ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∞–∫—Ü–µ–Ω—Ç—ã –∏–ª–∏ —à—É—Ç–ª–∏–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞—é—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç)

      –ü—Ä–∏—Å—ã–ª–∞–π –º–Ω–µ —Ç–µ–∫—Å—Ç –≤ Markdown-—Å—Ç–∏–ª–µ. –ò—Å–ø–æ–ª—å–∑—É–π:
      –ñ–∏—Ä–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ ** –¥–ª—è –∏–º—ë–Ω –∏–ª–∏ –≤–∞–∂–Ω—ã—Ö —Å–ª–æ–≤
      –ú–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å -
      –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ç–∏—Ä–µ ‚Äî –∏ —Ç.–¥.
      –ò—Å–ø–æ–ª—å–∑—É–π —Ç–∞–∫–∂–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –ª–∏–Ω–∏–∏ –¥–ª—è –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –ø–æ –º—ã—Å–ª—É –∏–ª–∏ —Ç–∏–ø—É –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—Å—Ç–∞.
      –ù–µ —Å—Ç–∞–≤—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º –≤–Ω–∞—á–∞–ª–µ..
      –ù–µ —Å—Ç–∞–≤—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é –≤ –∫–æ–Ω—Ü–µ, –ø–æ—Å–ª–µ —Ç–µ–∫—Å—Ç–∞.
      –¢–∞–∫–∂–µ –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –æ—Ç—Å—Ç—É–ø, –∏–Ω–∞—á–µ —Ç–µ–∫—Å—Ç –∫ –ª–∏–Ω–∏–∏ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–æ–∫.
      –ï—Å–ª–∏ –¥–µ–ª–∞–µ—à—å —Å–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ –∂–∏—Ä–Ω–æ–º —Å—Ç–∏–ª–µ, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–ª–∏—á–∞–ª—Å—è –æ—Ç —Å–∞–º–æ–≥–æ —Å–ø–∏—Å–∫–∞.
    `;

    
    try{

      const aiResponse =  await this.openAIService.generateResponse(contextDialog, system, []);

      return { message: aiResponse };
    }catch (error) {
      console.error('Error calling OpenRouter API:', error.response?.data || error.message);
      return { message: 'Error' };
    } 
  }

  // Returns group ids that both users share
  private async getMutualGroupIds(userAId: number, userBId: number): Promise<number[]> {
    const rows = await this.groupUserRepository
      .createQueryBuilder('ug')
      .select('ug.groupId', 'groupId')
      .where('ug.userId IN (:...userIds)', { userIds: [userAId, userBId] })
      .groupBy('ug.groupId')
      .having('COUNT(DISTINCT ug.userId) = 2')
      .getRawMany();

    return rows.map((r: any) => Number(r.groupId));
  }

  private buildDefaultAiProfileData() {
    return {
      data: {
        avatarUrl: null,
        quote: '',
        headline: '',
        favoriteEmoji: '',
        online: false,
        lastOnline: '',
        emotionLevel: 0.0,
        emotionLabel: '',
        emotionTimeline: [],
        aiCurrentMood: '',
        aiProfileSummary: '',
        aiAdvice: '',
        aiSupportScore: 0.0,
        messagesCount: 0,
        activityLevel: 0.0,
        badges: [],
        timeInApp: [],
        categories: [],
        aiAchievements: [],
        aiStyle: '',
        aiHowUserCanHelp: ''
      }
    };
  }

  private normalizeAiProfile(raw: any) {
    const def = this.buildDefaultAiProfileData();
    const out = { ...def };
    if (raw && typeof raw === 'object' && raw.data && typeof raw.data === 'object') {
      const d = raw.data;
      out.data.avatarUrl = d.avatarUrl ?? def.data.avatarUrl;
      out.data.quote = typeof d.quote === 'string' ? d.quote : def.data.quote;
      out.data.headline = typeof d.headline === 'string' ? d.headline : def.data.headline;
      out.data.favoriteEmoji = typeof d.favoriteEmoji === 'string' ? d.favoriteEmoji : def.data.favoriteEmoji;
      out.data.online = typeof d.online === 'boolean' ? d.online : def.data.online;
      out.data.lastOnline = typeof d.lastOnline === 'string' ? d.lastOnline : def.data.lastOnline;
      const clamp01 = (n: any) => {
        const num = typeof n === 'number' ? n : 0;
        return Math.max(0, Math.min(1, num));
      };
      out.data.emotionLevel = clamp01(d.emotionLevel);
      out.data.emotionLabel = typeof d.emotionLabel === 'string' ? d.emotionLabel : def.data.emotionLabel;
      out.data.emotionTimeline = Array.isArray(d.emotionTimeline) ? d.emotionTimeline.filter((x: any) => typeof x === 'number').map(clamp01) : def.data.emotionTimeline;
      out.data.aiCurrentMood = typeof d.aiCurrentMood === 'string' ? d.aiCurrentMood : def.data.aiCurrentMood;
      out.data.aiProfileSummary = typeof d.aiProfileSummary === 'string' ? d.aiProfileSummary : def.data.aiProfileSummary;
      out.data.aiAdvice = typeof d.aiAdvice === 'string' ? d.aiAdvice : def.data.aiAdvice;
      out.data.aiSupportScore = clamp01(d.aiSupportScore);
      out.data.messagesCount = Number.isInteger(d.messagesCount) && d.messagesCount >= 0 ? d.messagesCount : def.data.messagesCount;
      out.data.activityLevel = clamp01(d.activityLevel);
      out.data.badges = Array.isArray(d.badges)
        ? d.badges
            .filter((b: any) => b && typeof b === 'object')
            .map((b: any) => ({
              icon: typeof b.icon === 'string' ? b.icon : '',
              name: typeof b.name === 'string' ? b.name : '',
            }))
        : def.data.badges;
      out.data.timeInApp = Array.isArray(d.timeInApp) ? d.timeInApp.filter((x: any) => typeof x === 'number') : def.data.timeInApp;
      out.data.categories = Array.isArray(d.categories) ? d.categories.filter((x: any) => typeof x === 'string') : def.data.categories;
      out.data.aiAchievements = Array.isArray(d.aiAchievements) ? d.aiAchievements.filter((x: any) => typeof x === 'string') : def.data.aiAchievements;
      out.data.aiStyle = typeof d.aiStyle === 'string' ? d.aiStyle : def.data.aiStyle;
      out.data.aiHowUserCanHelp = typeof d.aiHowUserCanHelp === 'string' ? d.aiHowUserCanHelp : def.data.aiHowUserCanHelp;
    }
    return out;
  }

  private tryParseJsonStrict(text: string): any | null {
    try {
      return JSON.parse(text);
    } catch {
      // try to extract JSON between first { and last }
      const first = text.indexOf('{');
      const last = text.lastIndexOf('}');
      if (first !== -1 && last !== -1 && last > first) {
        const slice = text.slice(first, last + 1);
        try { return JSON.parse(slice); } catch { return null; }
      }
      return null;
    }
  }

  private async getFormattedMutualMessagesContext(targetUserId: number, requesterUserId: number): Promise<{ formatted: string; messagesCount: number; }> {
    const mutualGroupIds = await this.getMutualGroupIds(targetUserId, requesterUserId);
    if (!mutualGroupIds.length) {
      return { formatted: '', messagesCount: 0 };
    }

    const allMessages: { text: string; createdAt: Date; username: string }[] = [];

    for (const gid of mutualGroupIds) {
      const msgs = await this.getMessagesForGroup(gid, requesterUserId);
      allMessages.push(...msgs.map(m => ({ text: m.text, createdAt: m.createdAt, username: m.username })));
    }

    // sort across groups by time
    allMessages.sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());

    return { formatted: this.formatMessages(allMessages), messagesCount: allMessages.length };
  }

  private async getFormattedOwnMessagesContext(userId: number): Promise<{ formatted: string; messagesCount: number; }> {
    const messages = await this.messageRepo.find({
      where: { sender: { id: userId }, ai: false },
      relations: ['sender'],
      order: { createdAt: 'ASC' },
    });

    const mapped = messages.map((msg) => ({
      text: msg.text,
      createdAt: msg.createdAt,
      username: msg.sender?.username ?? 'me',
    }));

    return { formatted: this.formatMessages(mapped), messagesCount: mapped.length };
  }


  async generateUserAiProfile(targetUserId: number, requesterUserId: number ): Promise<any> {
  const targetUser = await this.userRepo.findOne({ where: { id: targetUserId } });
  if (!targetUser) throw new NotFoundException('Target user not found');

  // collect context
  const isSelf = targetUserId === requesterUserId;
  const contextData = isSelf
    ? await this.getFormattedOwnMessagesContext(targetUserId)
    : await this.getFormattedMutualMessagesContext(targetUserId, requesterUserId);

  const contextDialog = contextData.formatted;
  const messagesCount = contextData.messagesCount;

  const lastLoginAt = targetUser.loginAt ? new Date(targetUser.loginAt) : null;
  const now = new Date();
  const minutesSince = lastLoginAt ? Math.floor((now.getTime() - lastLoginAt.getTime()) / 60000) : null;

  const contextLine = isSelf
    ? `- –ò—Å—Ç–æ—á–Ω–∏–∫: —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è; –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${messagesCount}.`
    : `- –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ —á–∞—Ç—ã: ${contextDialog ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}; –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${messagesCount}.`;

  const system = `
–¢—ã ‚Äî –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–∏—Å–æ–∫ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–¢–¨ —Å—Ç—Ä–æ–≥–æ JSON —Å–æ —Å–≤–æ–¥–Ω–æ–π AI-–∫–∞—Ä—Ç–æ–π –ø—Ä–æ—Ñ–∏–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id=${targetUserId}, username="${targetUser.username}".
- –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ—Ç—Ä–∏—Ç –ø—Ä–æ—Ñ–∏–ª—å: id=${requesterUserId}.
- –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (loginAt): ${lastLoginAt ? lastLoginAt.toISOString() : 'unknown'}.
${contextLine}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç–≤–µ—Ç—É:
- –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON, –ë–ï–ó –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞:
{
  "data": {
    "avatarUrl": string|null,
    "quote": string,
    "headline": string,
    "favoriteEmoji": string,
    "online": boolean,
    "lastOnline": string,

    "emotionLevel": number,        // 0..1
    "emotionLabel": string,
    "emotionTimeline": number[],    // –∑–Ω–∞—á–µ–Ω–∏—è 0..1, –¥–ª–∏–Ω–∞ 0..7
    "aiCurrentMood": string,
    "aiProfileSummary": string,
    "aiAdvice": string,
    "aiSupportScore": number,      // 0..1

    "messagesCount": number,       // —Ü–µ–ª–æ–µ >= 0 (–º–æ–∂–µ—à—å –æ—Ü–µ–Ω–∏—Ç—å –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É)
    "activityLevel": number,       // 0..1 (–æ—Ü–µ–Ω–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
    "badges": [{ "icon": string, "name": string }],
    "timeInApp": number[],         // 0..24, –¥–ª–∏–Ω–∞ 0..7 (–º–æ–∂–µ—à—å –æ—Ü–µ–Ω–∏—Ç—å)

    "categories": string[],
    "aiAchievements": string[],
    "aiStyle": string,
    "aiHowUserCanHelp": string     // —á–µ–º —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥—Ä—É–≥–∏–º: —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞, –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–´
  }
}

–ü—Ä–∞–≤–∏–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:
- –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–∞–ª–æ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π –ø—É—Å—Ç—ã–µ/–¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏/–º–∞—Å—Å–∏–≤—ã, 0/false/null) –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π.
- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—á–µ–≤–∏–¥–Ω—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –∫—Ä–∞—Ç–∫–æ –æ—Ç—Ä–∞–∑–∏ –∏—Ö.
- –ü–æ–ª—è emotionLevel, aiSupportScore, activityLevel –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤ emotionTimeline –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0..1.
- "aiHowUserCanHelp" —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏: –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–µ–Ω, –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º (–Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ, —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞, —Ç–∏–ø–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã/–∑–∞–¥–∞—á–∏).
- –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ Markdown, –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
`;

  const prompt = isSelf
    ? `–ù–∏–∂–µ —Å–æ–±—Ä–∞–Ω—ã —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω —Å–º–æ—Ç—Ä–∏—Ç —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å):\n\n${contextDialog}`
    : `–ù–∏–∂–µ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ–±—â–∏—Ö —á–∞—Ç–æ–≤ (–µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —á–∞—Ç–æ–≤ –Ω–µ—Ç):\n\n${contextDialog}`;

  try {
    const aiText = await this.openAIService.generateResponse(prompt, system, []);
    const parsed = this.tryParseJsonStrict(aiText) ?? this.buildDefaultAiProfileData();
    const normalized = this.normalizeAiProfile(parsed);

    // Optionally enrich with some known numeric hints
    normalized.data.messagesCount = normalized.data.messagesCount || messagesCount;

    // online/lastOnline: compute strictly from loginAt with a 15-minute threshold
    if (minutesSince !== null) {
      normalized.data.online = minutesSince <= 15;
      if (normalized.data.lastOnline === '') {
        normalized.data.lastOnline = minutesSince === 0 ? 'just now' : `${minutesSince} minutes ago`;
      }
    }

    return normalized;
  } catch (error) {
    console.error('Error generating AI profile:', (error as any).response?.data || (error as any).message);
    return this.buildDefaultAiProfileData();
  }
  }


  async getSnippets(dto: RequestSnippets): Promise<any> {
    const sender = await this.userRepo.findOne({ where: { id: dto.senderId } });
    if (!sender) throw new NotFoundException('Sender not found');


    let group = null;

    if (dto.groupId) {
      group = await this.groupRepo.findOne({ where: { id: dto.groupId } });
      if (!group) throw new NotFoundException('Group not found');
    }

    const contextDialogBd = await this.getMessagesForGroup(dto.groupId, dto.senderId);
    const contextDialog = this.formatMessages(contextDialogBd);

    const system = `
    –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ –∏ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –æ—Ç 3 –¥–æ 5 —Å–Ω–∏–ø–µ—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ json —Ñ–æ—Ä–º–∞—Ç–µ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞. 
        –§–æ—Ä–º–∞—Ç { "snippets": ["snippet1", "snippet2", "snippet3"] }
        –Ω—É–∂–Ω–æ —á—Ç–æ–±—ã —Ç—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–ª—é—á–µ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –≥–ª—è–¥—è –Ω–∞ —ç—Ç—É –ø–µ—Ä–µ–ø–∏—Å–∫—É.
        –ü—Ä–∏–º–µ—Ä —Å–Ω–∏–ø–µ—Ç–æ–≤: –û —á–µ–º —á–∞—Ç? –ö—É–¥–∞ —Ä–µ—à–∏–ª–∏ –µ—Ö–∞—Ç—å? –ö—Ç–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –ø–æ–µ–∑–¥–∫–∏?
        –¢–∞–∫–∂–µ —Å–Ω–∏–ø–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ—Ä–æ—Ç–∫–∏–µ, –æ–Ω–∏ –±—É–¥—É—Ç –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫.
        –¢–≤–æ–∏ —Å–Ω–∏–ø–µ—Ç—ã –±—É–¥—É –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è AI –∞—Å–∏—Å—Ç–µ–Ω—Ç–∞, –Ω–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –≠—Ç–∏ —Å–Ω–∏–ø–µ—Ç—ã –Ω—É–∂–Ω—ã —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–º–æ—á—å —É–∑–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ –æ —á–∞—Ç–µ.
        –°—Ñ–æ—Ä–º–∏—Ä—É–π —Ç–∞–∫–æ–π —Å–ø–∏—Å–æ–∫ —Å–Ω–∏–ø–µ—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤—Ç–∞–µ–ª—é –±—ã–ª–æ —É–¥–æ–±–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –∏ –∫–ª—é—á–µ–≤–æ–µ –æ —á–∞—Ç–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è. 
        –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º json!!! –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –ø–∞—Ä—Å–∏—Ç JSON.parse.
        –ò–∑—É—á–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É, –µ—Å–ª–∏ —Ç—Ä—É–¥–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–Ω–∏–ø–µ—Ç—ã, –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è –ø–µ—Ä–µ–ø–∏—Å–∫–∞, –ø—Ä–∏—Å—ã–ª–∞–π –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤. 
        –ù–∏–∂–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∞:
    `;

    try{

      //const aiResponse = await this.openAIService.generateResponse(contextDialog, system, []);

    //  const res: any = JSON.parse(aiResponse);  
      const res: any = {snippets: []}; //= JSON.parse(aiResponse);  
     
      res.snippets = [
        '–ß—Ç–æ —Ç—ã –º–æ–∂–µ—à—å?',
        '–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —á–∞—Ç–µ?',
        '–î–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤',
        '–ï—Å—Ç—å –ª–∏ –∫–∞–∫–∏–µ-—Ç–æ —Ä–µ—à–µ–Ω–∏—è?',
       // ...res.snippets
      ]

      return  res;
    }catch (error) {
      console.error('Error calling OpenRouter API:', error.response?.data || error.message);
      return {snippets: []};
    } 
  }



}
